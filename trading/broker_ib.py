"""
IB Broker integration module
============================

This module provides functions to submit trades generated by the quant system
through Interactive Brokers (IB) rather than the default Alpaca or FIX
connectors used previously.  It relies on the helper functions defined in
``ib_connector.py`` to connect to Trader Workstation (TWS), convert
``trades`` into IB order objects, and submit those orders.

Functions
---------
sync_trades_to_ib(trade_ids: List[int]) -> Dict[int, str]
    Pulls trades from the database by ID, connects to IB, creates order
    objects via ``trades_to_ib_orders``, and submits them using
    ``submit_ib_orders``.  The results dictionary maps each trade ID to
    either ``"submitted:<orderId>"`` on success or ``"error:<message>"`` if
    something goes wrong.

This file intentionally avoids any references to Alpaca or FIX.  To use IB
exclusively, call ``sync_trades_to_ib`` instead of ``sync_trades_to_broker``.
"""

from __future__ import annotations

import logging
from typing import Dict, List

import pandas as pd
from sqlalchemy import text

from db import SessionLocal, Trade  # type: ignore
from trading.ib_connector import connect_ib, trades_to_ib_orders, submit_ib_orders

log = logging.getLogger(__name__)


def sync_trades_to_ib(trade_ids: List[int], host: str = "127.0.0.1", port: int = 7497, client_id: int = 1) -> Dict[int, str]:
    """
    Sync trades to Interactive Brokers.

    Given a list of trade IDs, this function retrieves the corresponding trades
    from the ``trades`` table, connects to IB, converts them into IB order
    payloads, submits the orders via TWS, and updates the trade status in
    the database.

    Parameters
    ----------
    trade_ids : list[int]
        A list of trade IDs to be submitted.
    host : str, optional
        Hostname where TWS or IB Gateway is running. Defaults to ``"127.0.0.1"``.
    port : int, optional
        Port on which TWS/IB Gateway is listening. Defaults to ``7497`` (paper trading).
    client_id : int, optional
        Unique client ID for the IB session.  Defaults to ``1``.

    Returns
    -------
    dict[int, str]
        A mapping of trade ID to a result string.  On success, the string
        will be ``"submitted:<orderId>"``; on failure, it will be
        ``"error:<message>"``.
    """
    results: Dict[int, str] = {}

    # Connect to IB
    ib = connect_ib(host=host, port=port, client_id=client_id)
    if ib is None:
        log.error("Unable to connect to IB; aborting trade submission")
        for tid in trade_ids:
            results[tid] = "error:ib_connection_failed"
        return results

    # Load trades from DB
    try:
        with SessionLocal() as s:
            trades_df = pd.read_sql_query(
                text("SELECT id, symbol, side, quantity, price FROM trades WHERE id = ANY(:ids) AND status = 'generated'"),
                s.bind,
                params={'ids': trade_ids}
            )
            if trades_df.empty:
                log.warning("No generated trades found for the provided IDs")
                for tid in trade_ids:
                    results[tid] = "error:no_trade"
                return results

            # Convert trades to IB order payloads
            orders = trades_to_ib_orders(ib, trades_df, use_limit_orders=False)
            if not orders:
                log.warning("No orders were generated from the trade data")
                for tid in trades_df['id'].tolist():
                    results[tid] = "error:no_order"
                return results

            # Submit orders
            submission_results = submit_ib_orders(ib, orders)

            # Update DB and build results mapping
            for tid, status_str in submission_results.items():
                # Determine status code and broker order id from response
                status, _sep, message = status_str.partition(":")
                trade_status = "submitted" if status == "submitted" else "error"
                broker_order_id = message if status == "submitted" else None
                # Update the trade record
                try:
                    s.execute(
                        text("UPDATE trades SET status = :status, broker_order_id = :boid WHERE id = :tid"),
                        params={
                            'status': trade_status,
                            'boid': broker_order_id,
                            'tid': tid,
                        }
                    )
                except Exception as e:
                    log.error(f"Failed to update trade {tid}: {e}")
                results[tid] = status_str
            s.commit()
            log.info(f"Processed {len(submission_results)} trades via IB")
            return results
    finally:
        try:
            ib.disconnect()
        except Exception:
            pass
